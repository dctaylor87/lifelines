LifeLines Source Release, Version 3.2.0
https://lifelines.github.io/lifelines/
-------------------------------------------------------------------------

********************************
Contents:
1. General (UNIX) installation
 1a) Dependencies
 1b) Specific Issues
2. Platform specific notes
 2a) Platforms supported out-of-the-box
 2b) Microsoft Windows
 2c) cygwin
 2d) rpm packages
 2e) Debian binaries
 2f) gcc 2.7.2.1
 2g) curses
 2h) Mac OS X
********************************

******************************
1. General (UNIX) installation
******************************

This is the source distribution of the LifeLines system, a genealogy
software system.

LifeLines should compile correctly using GNU gcc or any native C compiler.
It also will build using the Cygnus tools on Windows (but see note in the
platform notes section below).

If you have downloaded a "release" package, do the following:

	sh ./configure
	make
	make install

If you have downloaded a "source code" package, or have cloned the git
repository directly, do the following:

	sh build/autogen.sh
	sh ./configure
	make
	make install

In both cases, various dependencies are required.  (See section 1a.)

This will generate Makefiles suitable for your platform and then build
and install the LifeLines programs.  You will end up with the following
executables (installed in various places, depending on your platform):

llines   -- main LifeLines system program
llexec   -- non-interactive version, useful for running reports
btedit   -- general purpose btree edit program
dbverify -- checks a LifeLines database for problems

llines is the main LifeLines program.

lllexec is a non-interactive version of the main program, and is
handy for automatically running reports against a given database.

dverify can be used to verify the correctness of a LifeLines database.
This is handy if you're storing databases on floppies, or just for
peace of mind.

btedit is a administration tool used for unmangling mangled databases, 
and is extremely powerful.  You should only use this program under the
expert guidance of a LifeLines developer.

******************************
1a) Dependencies
******************************

lifelines has a number of dependencies and they vary depending on
how you build lifelines.

1. General dependencies:

   ncursesw (or any curses with wide character support)

2. Building from source code repository

   If you are building directly from the source code repository, and
   not from a release package, you will require these tools:

   automake
   autoconf
   bison

3. Document Generation

   Regeneration of the docs requires tools to convert from xml to html, pdf,
   and text.  Currently the tools being used are:

   xmlto
   dblatex
   texlive-cmap

   By default, these tools are not required.  If you want to edit and rebuild
   documentation, run configure with the '--with-docs' option.

4. National Language Support (NLS)

   Use of NLS, or regeneration of the language files, requires the following:

   gettext
   iconv

   By default, NLS support is enabled.  If you want to disable NLS support,
   run configure with the '--disable-nls' option.

******************************
1b) Specific Issues
******************************

GETTEXT

If configure succeeds, but make fails very early with an error like so:

  cd ../../po && rm -f da.gmo && : -c --statistics -o da.gmo da.po
  mv: cannot stat `t-da.gmo': No such file or directory
  ...

then you probably do not have the gettext tools -- the commandline
tools needed for development, which are needed to compile, and
are generally a separate package from the runtime libraries needed
by running programs.

**************************
2. Platform specific notes
**************************

*********************
2a) Platforms supported out-of-the-box
*********************

Many unix systems should be supported out-of-the-box with the tarball
(lifelines-x.y.z.tar.gz) distribution.

Reported successes include:
 lifelines-3.0.46:
   Fedora Core 3
   FreeBSD 4.11-STABLE
   OS X 10.3.9
 
*********************
2b) Microsoft Windows
*********************

For installing the binary distribution on MS-Windows, refer to the
file Install.LifeLines.Windows.txt included in that distribution
(& also included in the docs subdirectory of the source
distributions).

For compiling from source on MS-Windows, if using cygwin, refer to
the General (UNIX) instruction above (and see also the cygwin note
below). If using MS Visual C++, you may use the project files
included in the subdirectories beneath /win32/msvc6 (which are
currently used by Perry to generate the binaries in the MS-Windows
binary distribution).

**********
2c) Cygwin
**********

Cygwin is a UNIX environment for MS-Windows. 
    http://sources.redhat.com/cygwin
The lines around the boxes in the lifelines curses GUI use OEM
box characters, and so only display correctly with this setting:
    export CYGWIN=codepage:oem
This of course affects the console code page. If all your data is
ASCII, this solution may work fine for you. Otherwise, you may
invoke llines with the -z switch to suppress curses graphics, and
use primitive ASCII graphics. This is not particularly attractive,
but is usable. Suggestions are welcome.
Note that the -z commandline switch was added after the 3.0.9 
release.

To compile libiconv on cygwin, I had to compile it statically, eg,
(in libiconv directory)
   ./configure --enable-static --disable-shared

***************
2d) rpm packages
***************

The source distribution includes the spec file to create rpm
packages.

***************
2e) Debian packages
***************

Christian Perrier maintains a Debian port of linux.
See:
http://packages.debian.org/cgi-bin/search_packages.pl?searchon=names&version=all&exact=1&keywords=lifelines

***************
2f) compilers
***************

Currently lifelines compiles well with gcc.
Your experience with other compilers may vary.

**********
2g) curses
**********

Compiling with curses (lacking ncurses) on a BSDI 3.1 box,
I had to add
    -ltermcap
to the LIBS line in liflines/Makefile. (The symptom was
"unknown symbol... _tputs.)
However, I wound up core dumping at run-time, so I don't know
what is going on. 
(Perry, Jan, 2002)

************
2h) Mac OS X
************

Please see the following page about LifeLines on Mac OS X:
    http://homepage.mac.com/shrubbery/LifeLines
(which is also available via the Apple downloads site and Stepwise.)
This page offers both precompiled binaries and instructions for
compilation.
NB: Because the gnu tests for platform didn't recognize Darwin,
on older versions, perhaps before 10.2.x, it was necessary to pass
an argument to configure, eg,
   ./configure ppc
There is no specific code needed for Darwin; this is just to avoid
the macros getting angry at the unknown output from "uname -a".

