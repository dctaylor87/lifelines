\input texinfo
@setfilename python-internals
@titlepage
@titlefont{Lifelines Python Extension Internals}
@settitle Lifelines Python Extension Internals Manual
@author David Cole Taylor
@today{}
@end titlepage
@syncodeindex vr fn
@syncodeindex tp fn
@contents

@chapter Lifelines Internals

@section Overview
This document concerns itself with the needs of those that wish to
modify Lifelines -- whether to extend the Python embedding or fix a
bug in it -- or to modify the core Lifelines.

If your goal is to use the Python embedding, please consult the
document ``Lifelines Python Extension''.  If your goal is to use the
Lifelines Report Writing language, please consult the document
``Lifelines Programming Subsystem and Report Generator''.

Much of the Python internals knowledge needed is covered by the
documents ``Extending and Embedding Python'' and ``The Python/C API''
which are part of the standard Python distribution.  They were
consulted heavily during the implementation of the Lifelines Python
extension.

The other large knowledge base needed is knowledge of Lifelines
internals.  When I started the Python embedding project, there was a
dearth of information available on Lifelines internals.  This document
is an attempt to partially address that absence.

While some of the information presented is specific to the Python
embedding, most should be useful to anyone wishing to modify
Lifelines.  That said, the functions, variables, and macros documented
are those that I encountered during the implementation of the Python
embedding.

There are many many gaps here.  If a knowledge or understanding of
something was not needed as part of the Python embedding project, you
will probably not find it here unless it was added at a later date.
For example, there was no need to study the lexing and parsing of the
Lifelines report writing language, so you won't find anything about
that here.  Nor, was there much need to study the disk layout of the
Lifelines database -- beyond high level functions for activities such
as importing, exporting, and related activities.

This document is meant to supplement, not replace, the ``Lifelines
Developer Documentation'' document.

If is my hope that this document will grow over time.  Feedback,
additions, and corrections are welcomed and encouraged.

@section Layout

There are a number of subsystems each in its own subdirectory:

@itemize
@item @code{arch}

I do not know what this is.

@item @code{btree}

The code that implements the reading and the writing of the b-tree disk storage.

@item @code{gedlib}

Most of the GEDCOM related code lives here.

@item @code{interp}

Primarily, the code that implements the lexing, the parsing, and the
user callable functions of the Lifelines Report writing language.

@item @code{liflines}

The code that deals with the screen (via @code{ncurses}), the various
menus, the user interaction, and various routines that do not have a
better location to live.

@item @code{python}

Support for the Python embedding.

@item @code{stdlib}

Not a subsystem, as such, but rather a collection of routines that are
meant to be generically useful across subsystems.  Some of the
routines are implementations of functionality that is available on
many systems, but not everywhere.

@item @code{ui}

User interface, obviously.  Less obviously, the code here is used by
@command{llexec} and not by @command{llines}.  Some of the routines
here are mere stubs of their more fleshed out cousins that live in
@code{liflines}.  Stubs that should be, in my opinion, fleshed out.

@item @code{tools}

Not a subsystem, but rather tools that can be helpful if you get into
trouble -- such as a corrupted database.

@item @code{hdrs}

Not a subsystem (obviously), but rather header files of macros and
function declarations that are meant to be shared between subsystems.
@end itemize

@section Python Files

For the Python embedding, the emphasis is on RECORDs, not NODEs.  With
the exception of the header file @code{llpy-externs.h}, which lives in
directory @code{src/hdrs}, all of the source files live in the directory
@code{src/python}.

@itemize @bullet

@item @file{Makefile.am}

Simple makefile saying which files belong to the Python extension and
the name of the library that contains the compiled files.

@item @file{Makefile.in}

Boring.  Generated by automake.  @b{DO NOT EDIT.}

@item @file{database.c}, @file{database.h}

Contains database centric routines such as @code{firstindi}, @code{lastindi},
@code{firstfam}, and @code{lastfam}.
@findex firstindi
@findex lastindi
@findex firstfam
@findex lastfam

@item @file{event.c}

Event (NODE, not RECORD) and date specific routines are found here.

@item @file{family.c}, @file{family.h}

Most everythiing that deals with FAM RECORDs.

@item @file{iter.c}, @file{iter.h}

Iterators for individual, family, source, event, and other RECORDs are
found here.

@item @file{nodes.c}

@item @file{other.c}

Allocation, deallocation, and iteration of OTHR RECORDs.

@item @file{person.c}, @file{person.h}

Most everything that deals with INDI RECORDs.  Might ought to be
renamed to individual.[ch].

@item @file{python-to-c.c}, @file{python-to-c.h}

Contains PyInit_llines, llpy_init, and a handful of functions and
variables that don't really fit anywhere else.

@item @file{records.c}

Functions which are RECORD type agnostic, for example the functions
@code{key_to_record} and @code{keynum_to_record} are found here.

@item @file{run.c}

Functions for running the Python interpreter -- whetther interactively
or on a file are found here.

@item @file{set.c}, @file{set.h}

Non-instance functions that take or return sets.

@item @file{source.c}

Allocation, deallocation, and iteration of SOUR RECORDs.

@item @file{types.c}, @file{types.h}

Rich compare functions for records and nodes.  Hash function for records.

@item @file{user.c}

Those user interaction functions which are not instance methods can be
found in here.

@end itemize

@section NODEs And RECORDs

The Lifelines Report Writing language primarily deals with NODES.  By
contrast, the Python Extension primarily deals with RECORDS.

Both NODEs and RECORDs are refernce counted.  When creating a
reference to either a NODE or a RECORD it is important to ensure that
its reference count is incremented.  And when destroying a reference,
that it is decremented.

NOTE: The NODE reference counts @b{DO NOT} include references from
other NODEs, such as the parent, sibling, and child links.  Nor the
link from a RECORD to its top NODE.  The reference counts @b{DO} count
the number of @code{PVALUE}s and @code{PyObject}s that point to the
NODE.

Additionally, NODEs have a flags element.  Currently, only one flag
bit is defined -- whether the NODE is a temporary NODE or not.  A
tempoary NODE is a NODE that is not part of the NODE tree of any
RECORD.

@section Application Programmer Interfaces

The lists of functions, macros, and variables in the following
chapters are @b{very} incomplete.  They are largely the result of
investigations made to facilitate adding Python as a scripting
language.  Additions and corrections are both encouraged and welcomed.

@chapter GEDLIB Subsystem

These entries are found in the @code{src/gedlib} directory.

@section NODE Functions

@subsection Tree Related NODE Functions

@defmac nchild (node) @arrow{} NODE
Given a NODE @code{node}, return its first child.

NOTE: This is "child" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@defmac nsibling (node) @arrow{} NODE
Given a NODE @code{node}, return its first sibling.

NOTE: This is "sibling" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@defmac nparent (node) @arrow{} NODE
Given a NODE @code{node}, return its parent.

NOTE: This is "parent" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@deftypefun NODE find_tag (NODE node, CNSTRING str) @arrow{}
Given a NODE @code{node}, check its tag and that of each of its
siblings until either the tag @code{str} is found or we run out of
siblings.  If we find it, we return a pointer to the node, otherwise
we return NULL.
@end deftypefun

@deftypefun NODE copy_nodes (NODE node, BOOLEAN kids, BOOLEANS sibs)
A copy of @code{node} is made and returned.  If @code{kids} is true,
then the copy has copies of the children as well.  If @code{sibs} is
true, then the copy has copies of the siblings as well.
@end deftypefun

@deftypefun NODE copy_node_subtree (NODE node)
Returns a copy of the tree rooted at @code{node}.
@end deftypefun

@deftypefun NODE create_temp_node (STRING xref, STRING tag, STRING value, NODE parent)
Creates a new node with the specified @code{xref}, @code{tag},
@code{value}, and @code{parent}.  Sets the @code{ND_TEMP} bit in the
flags, and returns the new node.

@end deftypefun

@deftypefun BOOLEAN equal_tree (NODE root1, NODE root2)
Compares the tags and values of each node of the trees rooted at
@code{root1} and @code{root2}.  Returns true if they are all equal,
false otherwise.
@end deftypefun

@deftypefun void free_nodes (NODE node)
Frees @code{node}, all of its descendants, all of its siblings, and
all of their descendants.  Does @b{NOT} check reference counts.
@end deftypefun

@deftypefun BOOLEAN is_temp_node (NODE node)
Tests the @code{ND_TEMP} bit of @code{node}'s flags.  If set, it
return true, otherwise it returns false.
@end deftypefun

@deftypefun void set_temp_node (NODE node, BOOLEAN temp)
If @code{temp} is true, sets @code{node}'s @code{ND_TEMP} flag.
Otherwise clear the flag.
@end deftypefun

@deftypefun INT length_nodes (NODE node)
Returns the length of the sibling chain of @code{node}.
@end deftypefun

@deftypefun NODE string_to_node (STRING str)
Reads tree from @code{str}.  Modifies @code{str} -- adds NULs between
lines.  Might make other changes to @code{str}.
@end deftypefun

@subsection GEDCOM NODE Functions

@deftypefun NODE fam_to_first_chil (NODE node) @arrow{} top NODE of first child

Given a NODE @code{node} for a family, returns the top NODE of the first child.
If there are no children, NULL is returned.
@end deftypefun

@deftypefun NODE fam_to_last_chil (NODE node) @arrow{} top NODE of last child
Given a NODE @code{node} for a family, returns the top NODE of the last child.
If there are no children, NULL is returned.
@end deftypefun

@deftypefun NODE FAMS (NODE indi) @arrow{} NODE
Given an individual @code{indi}, return the tree pointed to by the
first @code{FAMS} NODE.  Returns NULL if there are none.
@end deftypefun

@deftypefun NODE indi_to_famc (NODE indi) @arrow{} NODE
Returns the top NODE of the tree pointed to by the first @code{FAMC}
node of @code{indi}.
@end deftypefun

@deftypefun NODE indi_to_fath (NODE indi) @arrow{} NODE
Returns the top-node of the first @code{HUSB} node of the family
represented by the first @code{FAMC} node of this individual.

Assumes that @code{indi} is the top-node of an INDI RECORD.
@end deftypefun

@deftypefun NODE indi_to_moth (NODE) @arrow{} NODE
Returns the top-node of the first @code{HUSB} node of the family
represented by the first @code{FAMC} node of this individual.

Assumes that @code{indi} is the top-node of an INDI RECORD.
@end deftypefun

@deftypefun NODE indi_to_next_sib_old (NODE)
@end deftypefun

@deftypefun NODE indi_to_prev_sib_old (NODE)
@end deftypefun

@deftypefun NODE qkey_to_fam (CNSTRING key)
@end deftypefun

@deftypefun NODE qkey_to_indi (CNSTRING key)
@end deftypefun

@deftypefun void replace_indi (NODE cur_indi, NODE new_indi)
Replaces a person, @code{cur_indi}, in database with a modified
version, @code{new_indi}.  Replaces all chilkdren nodes of
@code{cur_indi} with children nodes of @code{new_indi}.  Consumes
@code{new_indi} (calls @code{free_node} on it).
@end deftypefun

@deftypefun INT resolve_refn_links (NODE node)
Check and resolve all links in node tree.  This convets something like
@code{"<1850.Census>"} to something like @code{"@@S25@@"}.  Returns the
number of unresolved links.
@end deftypefun

@deftypefun BOOLEAN valid_indi_tree (NODE indi, STRING *pmsg, NODE orig)
Validates the INDI tree having top-node @code{indi}.  If @code{orig}
is non-NULL, it is the original version of the individual.  If
problems are found, false is returned and @code{pmsg} is set to a
message indicating what problem was found.  Otherwise, true is
returned.
@end deftypefun

@deftypefun INT val_to_sex (NODE node)
Converts @code{node}'s SEX value to one of the three integer constants
@code{SEX_UNKNOWN}, @code{SEX_MALE}, or @code{SEX_FEMALE}.  Assumes
@code{node}'s tag is @code{SEX}.
@end deftypefun

@subsection INDISEQ NODE Functions

@deftypefun INDISEQ fam_to_children (NODE fam)
Create a sequence of @code{fam}'s children.
@end deftypefun

@deftypefun INDISEQ fam_to_spouses (NODE fam)
Creates a sequence of spouses of @code{fam}.
@end deftypefun

@deftypefun INDISEQ indi_to_children (NODE indi)
Creates a sequence of @code{indi}'s children.  Filters out duplicates.
@end deftypefun

@deftypefun INDISEQ indi_to_families (NODE indi, BOOLEAN fams)
Creates a sequence of @code{indi}'s families.  Values will be input
person keynum (this is the ISPRN_FAMSEQ style).  If @code{fams} is
true, find spousal families, else find parental families.
@end deftypefun

@deftypefun INDISEQ indi_to_spouses (NODE indi)
Creates a sequence of @code{indi}'s spouses.  Values will be family
keynums.  This sequence will be ISPRN_SPOUSESEQ style (whatever that
is), meaning that marriage dates are included with names in print
strings.
@end deftypefun

@deftypefun void remove_indiseq (INDISEQ seq)
Frees @code{seq} and all the memory used by it.
@end deftypefun

@section NODE to RECORD traversal
@deftypefun RECORD node_to_record (NODE node) @arrow{} RECORD

Returns the RECORD that contains NODE @code{node}.
@end deftypefun

@section RECORD Functions 
@subsection Information about a RECORD
@deftypefun NODE nztop (RECORD record)
Returns the top node of @code{record}.
@end deftypefun

@deftypefun CNSTRING nzkey (RECORD record)
Returns @code{record}'s key.
@end deftypefun

@deftypefun INT nzkeynum (RECORD record)
Returns @code{record}'s keynum.
@end deftypefun

@deftypefun char nztype (RECORD record)
Returns @code{record}'s type.
@end deftypefun

@subsection Raw RECORDS

@deftypefun STRING retrieve_raw_record (CNSTRING key, INT *plen)
Retrieve RECORD string from database.  Returns the raw record as a
string.  @code{key} is the key of the desired record.  And @code{plen}
is used to return the length of the record that is being returned.
@end deftypefun

@subsection RECORD Reference Counts

@deftypefun void release_record (RECORD record)
Decrement reference count of @code{record} and freee the RECORD if the
reference count reaches zero.
@end deftypefun

@section NAME Related

@deftypefun CNSTRING getsxsurname (CNSTRING)
Returns surname for use by soundex routines.  Uses a static buffer.
And returns ____ if the first non-white space character of the surname
is not a letter.
@end deftypefun

@deftypefun CNSTRING getasurname (CNSTRING)
Returns a surname.  Uses a static buffer.
@end deftypefun

@deftypefun CNSTRING givens (CNSTRING name)
Returns the given names of @code{name}.  Uses a static buffer.
@end deftypefun

@deftypefun CNSTRING trad_soundex (CNSTRING)
Computes and returns the traditional soundex for the given surname.
@end deftypefun

@deftypefun STRING manip_name (STRING name, SURCAPTYPE captype, SURORDER surorder, INT len)
Manipulates the @code{name} according to the arguments.

Argument @code{captype} says whether to return the surname in all caps
or as found in @code{name}.

Argument @code{surorder} says whether the preserve the order in
@code{name} or to reorder as surname comma rest-of-name.

Argument @code{len} says the maximum length for the returned result.
Regardless of the value of @code{len}, the surname will not be
truncated and at least the first initial will be included in the result.
@end deftypefun

@deftypefun STRING trim_name (STRING name, INT len)
Trim GEDCOM name, @code{name} to less than or equal to given length,
@code{len}, but no shorter than first initial and surname.
@end deftypefun

@section DataBase Functions and Variables

@subsection Database Traversal Functions
@deftypefun INT xref_@{next|prev@}@{i|f|s|e|x@} (INT keynum) @arrow{} INT
@findex xref_nexti
@findex xref_nextf
@findex xref_nexts
@findex xref_nexte
@findex xref_nextx
@findex xref_previ
@findex xref_prevf
@findex xref_prevs
@findex xref_preve
@findex xref_prevx
Given @{ an individual | a family | a source | an event | an other @}
RECORD's keynum, return the keynum of the @{ next | previous @}
@{ individual | family | source | event | other @} RECORD in keynum order.

Keynums are never negative.  Zero is reserved for NOT FOUND / DOES NOT
EXIST.
@end deftypefun

@deftypefun INT xref_@{next|prev@} (char ntype, int keynum) @arrow{} INT
@findex xref_next
@findex xref_prev
@code{ntype} is one of @code{'I'}, @code{'F'}, @code{'S'}, @code{'E'},
or @code{'X'}.  This just calls the appropriate xref_@{next|prev@}@{i|f|s|e|x@}
function and returns the result.
@end deftypefun

@deftypefun INT xref_@{first|last@}@{i|f|s|e|x@} (void) @arrow{} INT
@findex xref_firsti
@findex xref_firstf
@findex xref_firsts
@findex xref_firste
@findex xref_firstx
@findex xref_lasti
@findex xref_lastf
@findex xref_lasts
@findex xref_laste
@findex xref_lastx
Return the keynum of the @{ first | last @} @{individual | family |
source | event | other @} in the database.
@end deftypefun

@section Database Variables

@defvar readonly

When set, the current database was opened in read-only mode and changes are not premitted.
@end defvar

@section Keys and Keynums

@deftypefun RECORD qkey_to_irecord (CNSTRING key)
@deftypefunx RECORD qkey_to_frecord (CNSTRING key)
@deftypefunx RECORD qkey_to_srecord (CNSTRING key)
@deftypefunx RECORD qkey_to_erecord (CNSTRING key)
@deftypefunx RECORD qkey_to_orecord (CNSTRING key)
Looks for a RECORD of the given type having the specified key.
On success, returns an addref'd record.  On failure, returns NULL.
@end deftypefun

@deftypefun RECORD keynum_to_frecord (int keynum)
@deftypefunx RECORD keynum_to_irecord (int keynum)
@deftypefunx RECORD keynum_to_record (char ntype, int keynum)
Looks for a RECORD of the specified type having the specifed keynum.
If found, returns the RECORD.  Otherwise returns NULL.
@end deftypefun

@deftypefun RECORD key_to_irecord (CNSTRING)
@end deftypefun

@section Date, Place, and Event Functions

@deftypefun INT date_get_year (GDATEVAL gdv)
@end deftypefun

@deftypefun STRING date_get_year_string (GDATEVAL gdv)
@end deftypefun

@deftypefun STRING event_to_date (NODE node, BOOLEAN shrt)
Convert an event to a date, where @code{node} is the event node and
the short form is used if @code{shrt} is true.
@end deftypefun

@deftypefun GDATEVAL extract_date (STRING str)
Extracts date from the free format string @code{str}, returns a parsed
date in a newly allocated GDATEVAL.
@end deftypefun

@deftypefun void free_gdateval (GDATEVAL gdb)
Free a GDATEVAL and all the memory allocated to it.
@end deftypefun

@deftypefun STRING shorten_date (STRING date)
Returns a short form of @code{date}.  Uses a static buffer.
@end deftypefun

@deftypefun STRING event_to_plac (NODE node, BOOLEAN shrt)
Convert an event to a place, where @code{node} is the event node and
the short form is used if @code{shrt} is true.
@end deftypefun

@deftypefun STRING event_to_string (NODE node, RFMT rfmt)
Convert an event to a string.  Finds @code{DATE} and @code{PLAC} nodes
within @code{node}'s tree and prints a string representation of them.
@code{rfmt} is reformatting info (may be NULL).
@end deftypefun

@deftypefun STRING shorten_plac (STRING plac)
Return short form of @code{plac}.  Returns modified input string or
value from @code{placabbr} table.
@end deftypefun

@section Miscellaneous Functions

@subsection Lifelines Options

@deftypefun INT getlloptint (CNSTRING optname, INT defval) @arrow{} INT
Looks up the integer option @code{optname}.  If found, its value is
returned, otherwise @code{defval} is returned.
@end deftypefun

@deftypefun STRING getlloptstr (CNSTRING optname, STRING defval) @arrow{} STRING
Looks up the string option @code{optname}.  If found, its value is
returned, otherwise @code{defval} is returned.
@end deftypefun

@subsection String Functions

@deftypefun STRING rmvat (CNSTRING str)
Remove @code{@@}'s from both ends of @code{str}.  Returns a static
buffer.
@end deftypefun

@deftypefun STRING name_string (STRING name)
Removes slashes from a GEDCOM name.  Returns a static buffer.
@end deftypefun

@section Variables and Constants
@subsection Messages and Other Strings

To facilitate translation, many -- but not all -- of the strings
printed by Lifelines were collected into one file --
@file{gedlib/messages.c}.  Some of these strings represent warning and
error messages, some are menu choices, and others are words and
phrases, such as ``born'', ``died'', and ``married'' that are used in
various contexts.

All of the ``messages'' (there are over 600 of them) found in
@file{gedlib/messages.c}, such as:

@defvr Message qSaskstr
@end defvr
@defvr Message qSchoostrttl
@end defvr
@defvr Message qSifonei
@end defvr
@defvr Message qSnotonei
@end defvr

have variable names that start with @code{qS}.

@subsection Miscellaneous Variables

@deftypevar BOOLEAN uu8
Flag indicating if internal codeset is UTF-8 or not.
@end deftypevar

@chapter Interpreter Subsystem

These entries are found in the @code{src/interp} directory.

@section User Interface Wrappers
The functions in this section are used by the reporting writing
functions to wrap the user interaction so as to be able to give a more
accurate timing of how long a script takes to run.  There is still
some ``computation'' within the wrapper, but it is reduced.

@defun rptui_ask_for_fam (STRING s1, STRING s2) @arrow{} RECORD
Wrapper around @code{ask_for_fam}.
@end defun

@defun rptui_ask_for_indi (STRING ttl, ASK1Q ask1) @arrow{} RECORD
Wrapper around @code{ask_for_indi}.
@end defun

@defun rptui_ask_for_int (STRING ttl, INT *prtn) @arrow{} BOOLEAN
Wrapper around @code{ask_for_int}.
@end defun

@section Miscellaneous Interpreter Functions

@deftypefun void dolock_node_in_cache (NODE node, BOOLEAN lock)
Lock or unlock node in cache -- if possible.
@end deftypefun

@chapter Lifelines Program

These entries are found in the @code{src/liflines} directory.

@section User Interaction
@deftypefun RECORD ask_for_fam (STRING pttl, STRING sttl)
Ask user to identify family by spouses.  String @code{pttl} is a
prompt to identify a spouse in the family.  String @code{sttl} is a
prompt to identify a child in the family.
@end deftypefun

@deftypefun RECORD ask_for_indi (STRING ttl, ASK1Q ask1)
Ask user to identify sequence and select a person.  String @code{ttl}
is a title for the question.  And @code{ask1q} says whether to present
the list if only one individual matches.
@end deftypefun

@deftypefun BOOLEAN ask_for_int (STRING ttl, INT *prtn)
Ask user to provide an integer.  @code{ttl} is the title prompt.
Value is returned in @code{prtn}.  Return value is true if a value is
returned.  And false if the user canceled the operation.
@end deftypefun

@deftypefun BOOLEAN ask_for_string (CNSTRING ttl, CNSTRING prompt, STRING buffer, INT buflen)
Ask the user for a string.  The title of the question (first line) is
@code{ttl} and the prompt of the question (second line) is
@code{prompt}.  The response is placed in @code{buffer} and, if
necessary, truncated to @code{buflen}.  The return value indicates
whether the user provided an answer (true) or canceled (false).
@end deftypefun

@deftypefun RECORD choose_from_indiseq (INDISEQ seq, ASK1Q ask1, STRING titl1, STRING titln)
Format sequence and have user choose from it (any type).  This handles
bad pointers.  Here, @code{seq} is the sequence from which to choose,
@code{ask1} is whether to prompt if only one element is in the
sequence, @code{titl1} is the title if sequence only has one element,
and @code{titln} is the title if sequence has multiple elements.
@end deftypefun

@chapter STDLIB Subsystem

These entries are found in the @code{src/stdlib} directory.

@deftypefun STRING get_lifelines_version (INT maxlen)
Returns Lifelines version string using a static buffer.  Truncates
result to smaller of buffer size or @code{maxlen}.
@end deftypefun

@deftypefun FILE* fopenpath (CNSTRING name, STRING mode, STRING path, STRING ext, INT utf8, STRING *pfname)
Search the directories in @code{path} for @code{name}, using extension
@code{ext} if necessary.  The file is opened with mode @code{mode}.
The pathname opened is returned in @code{pfname}.

@b{WARNING}: If the file is not found and iis being opened in a mode
other than read-only and @code{name} is not absolute nor
@code{./something}, then it will be created in the first directory of
@code{path} with @code{ext} appended.
@end deftypefun

@chapter Python Subsystem

These entries are found in the @code{src/python} directory.

@section Initialization Functions

@deftypefun void llpy_database_init (void)
@deftypefunx void llpy_event_init (void)
@deftypefunx void llpy_iter_init (void)
@deftypefunx void llpy_nodes_init (void)
@deftypefunx void llpy_person_init (void)
@deftypefunx void llpy_records_init (void)
@deftypefunx void llpy_set_init (void)
@deftypefunx void llpy_user_init (void)
These are the initialization routines for the respective files.
@end deftypefun

@section Dellocation Functions
@deftypefun void llpy_event_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_family_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_individual_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_iter_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_node_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_nodeiter_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_other_dealloc (PyObject *self)
@end deftypefun
@deftypefun void llpy_source_dealloc (PyObject *self)
@end deftypefun

@section Iterator Functions

@deftypefun LLINES_PY_ITER* llpy_events (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{events}.
Returns an iterator, an instance of @code{llines.Iter}, for EVEN RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_families (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{families}.
Returns an iterator, an instance of @code{llines.Iter}, for FAM RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_individuals (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{individuals}.
Returns an iterator, an instance of @code{llines.Iter}, for INDI RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_others (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{others}.
Returns an iterator, an instance of @code{llines.Iter}, for OTHR RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_sources (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{sources}.
Returns an iterator, an instance of @code{llines.Iter}, for SOUR RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_iter_iter (PyObject *self)
This is the @code{tp_iter} function for the @code{llines.Iter} type.
When invoked it simply returns its argument.
@end deftypefun

@deftypefun PyObject* llpy_iter_iternext (PyObject *self)
This is the @code{tp_iternext} function for the @code{llines.Iter}
type.  If the iterator was previously exhaused, it sets exception and
returns NULL.  Otherwise it calls @code{xref_next} to get the keynum
of the next RECORD of the specified type.  If the iterator is
exhausted, it returns NULL, otherwise it looks up the RECORD and
returns a pointer to a Python Object that points to the RECORD.
@end deftypefun

@deftypefun PyObject* llpy_nodeiter (PyObject *self, PyObject *args, PyObject *kw)
Implementation of the @code{llines} module function @code{nodeiter}.
@end deftypefun
@deftypefun PyObject* llpy_nodeiter_iter (PyObject *self)
This is the @code{tp_iter} function for the @code{llines.NodeIter} type.
When invoked it simply returns its argument.
@end deftypefun
@deftypefun PyObject* llpy_nodeiter_iternext (PyObject *self)
Iterates on a node tree in accordance with the arguments supplied when
the iterator was created.
@end deftypefun

@section Types

Types can be approached from two perspectives -- the C perspective and
the Python perspective.

For a C perspective, there are four types defined by the Python
extension:

@itemize @bullet
@item LLINES_PY_NODE
@tindex LLINES_PY_NODE

This contains two Lifelines specific fields -- @code{lln_node}, a
pointer to a NODE and, when known, @code{lln_type} records the type of
the RECORD that contains the NODE.  When the record type is unknown,
which is often, the @code{lln_type} field is initialized to zero.
The @code{lln_type} field might be eliminated in the future.

@item LLINES_PY_RECORD
@tindex LLINES_PY_RECORD

Like LLINES_PY_NODE, this contains two Lifelines specific fields --
@code{llr_record} and @code{llr_type}.  The field @code{llr_record}
points to a RECORD.  And the field @code{llr_type} contains the type
of the RECORD.  The type is @b{always} known.

@item LLINES_PY_ITER
@tindex LLINES_PY_ITER

This contains two Lifelines specific fields -- @code{li_type} and
@code{li_current}.  The @code{li_type} records the type of RECORD
being iterated over.  And the @code{li_current} records the keynum of
the most recently returned RECORD.  If no iteration has occurred, the
value is 0.  If it has been exhaused, the value is -1.

@item LLINES_PY_NODEITER
@tindex LLINES_PY_NODEITER

This is used for iterating over NODES.  And there is more than one
type of NODE iteration.  As a result, this type is more complex and
has five Lifelines specific fields:

@itemize
@item @code{ni_top_node}

This is the top of the NODE tree being iterated over.

@item @code{ni_cur_node}

This is the most currently returned NODE.  If iteration has not
started, this is NULL.

@item @code{ni_tag}

When iterating, if we are looking for a specific tag, this is that
tag.  Otherwise this is NULL.  When it is non-NULL, only nodes having
a matching tag will be returned.
@item @code{ni_type}

This is the type of NODE iteration to perform: There is child
iteration, where we iterate over the immediate children of the top
node.  And there is whole tree iteration, where we iterate over all
the nodes in the tree.  When doing whole tree iteration, we do depth
first, parent before child.

@item @code{ni_level}

This records how far we are from the top node of the tree being
iterated over.  For whole tree iteration it is part of the return
value.  Before we start it will be 0.  After exhaustion it will be -1.
@end itemize

@end itemize

From a Python perspective, the types are:

@itemize @bullet
@item @code{llines.Database}
@tindex llines.Database
@item @code{llines.Event}
@tindex llines.Event
@item @code{llines.Family}
@tindex llines.Family
@item @code{llines.Individual}
@tindex llines.Individuals
@item @code{llines.Iter}
@tindex llines.Iter
@item @code{llines.NodeIter}
@tindex llines.NodeIter
@item @code{llines.Node}
@tindex llines.Node
@item @code{llines.Other}
@tindex llines.Other
@item @code{llines.Source}
@tindex llines.Source
@end itemize
@section Variables

The following arrays define instance methods of their datatype:

@deftypevar PyMethodDef Lifelines_Event_Methods
@end deftypevar
@deftypevar PyMethodDef Lifelines_Family_Methods
@end deftypevar
@deftypevar PyMethodDef Lifelines_Iter_Methods
@end deftypevar
@deftypevar PyMethodDef Lifelines_Other_Methods
@end deftypevar
@deftypevar PyMethodDef Lifelines_Person_Methods
@end deftypevar
@deftypevar PyMethodDef Lifelines_Source_Methods
@end deftypevar
@deftypevar PyMethodDef Liflines_Node_Methods
@end deftypevar

@sp 1
The following arrays define additional @code{llines} module functions:

@deftypevar PyMethodDef Lifelines_Database_Functions
@end deftypevar
@deftypevar PyMethodDef Lifelines_Date_Functions
@end deftypevar
@deftypevar PyMethodDef Liflines_Node_Functions
@end deftypevar
@deftypevar PyMethodDef Lifelines_Person_Functions
@end deftypevar
@deftypevar PyMethodDef Lifelines_Records_Functions
@end deftypevar
@deftypevar PyMethodDef Lifelines_Set_Functions
@end deftypevar
@deftypevar PyMethodDef Lifelines_User_Functions
@end deftypevar

@sp 1
The following variables define the @code{llines} module types that are
added to Python by the Lifelines extension:

@deftypevar PyTypeObject llines_database_type
Definition of Python type @code{llines.Database}.
@end deftypevar
@deftypevar PyTypeObject llines_event_type
Definition of Python type @code{llines.Event}.
@end deftypevar
@deftypevar PyTypeObject llines_family_type
Definition of Python type @code{llines.Family}.
@end deftypevar
@deftypevar PyTypeObject llines_individual_type
Definition of Python type @code{llines.Individual}.
@end deftypevar
@deftypevar PyTypeObject llines_iter_type
Definition of Python type @code{llines.Iter}.
@end deftypevar
@deftypevar PyTypeObject llines_node_type
Definition of Python type @code{llines.Node}.
@end deftypevar
@deftypevar PyTypeObject llines_nodeiter_type
Definition of Python type @code{llines.NodeIter}.
@end deftypevar
@deftypevar PyTypeObject llines_other_type
Definition of Python type @code{llines.Other}.
@end deftypevar
@deftypevar PyTypeObject llines_record_type
Definition of Python type @code{llines.Record}.
@end deftypevar
@deftypevar PyTypeObject llines_source_type
Definition of Python type @code{llines.Source}.
@end deftypevar

@unnumbered Function, Variable, and Type Index
@printindex fn
@bye
